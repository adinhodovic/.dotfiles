" disable python 2.*
let g:python3_host_prog = '/usr/bin/python'

"#########################################
call plug#begin('~/.local/share/nvim/plugged')
"-----------------------------------------
"                   Plugin Manager
"-----------------------------------------
Plug 'VundleVim/Vundle.vim'
"-----------------------------------------
"                   General
"-----------------------------------------
Plug 'Shougo/neopairs.vim'                    " Pair symbols
Plug 'ervandew/supertab'                      " Tab down alts
Plug 'jremmen/vim-ripgrep'                    " Ripgrep
Plug 'junegunn/vim-easy-align'                " Align code around arbitrary characters =,:
Plug 'junegunn/vim-oblique'                   " Colors search result and sets nohlsearch on cursor move
Plug 'junegunn/vim-pseudocl'                  " Required by vim-oblique
Plug 'airblade/vim-rooter'                    " Sets root directory to project (git) directory by default
Plug 'kopischke/vim-fetch'                    " Open files at file:line:column
Plug 'scrooloose/nerdcommenter'               " Comment/uncomment source code files

"-----------------------------------------
"                   Automation
"-----------------------------------------
Plug 'cohama/lexima.vim'                      " Autoclosing
"-----------------------------------------
"                   GUI
"-----------------------------------------
Plug 'vim-airline/vim-airline'                " Bottom bar
"-----------------------------------------
"                   Shortkeys
"-----------------------------------------
Plug 'tpope/vim-surround'                     " Delete add surroundings in pair
"-----------------------------------------
"                   Colors
"-----------------------------------------
Plug 'morhetz/gruvbox'
"-----------------------------------------
"                   GIT
"-----------------------------------------
Plug 'airblade/vim-gitgutter'                 " Show changed git lines
Plug 'tpope/vim-fugitive'
"-----------------------------------------
"                   FZF
"-----------------------------------------
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
"-----------------------------------------
"                   Syntastic
"-----------------------------------------
Plug 'vim-syntastic/syntastic'
"-----------------------------------------
"                   Deoplete
"-----------------------------------------
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"-----------------------------------------
"                   Python
"-----------------------------------------
Plug 'deoplete-plugins/deoplete-jedi'
"-----------------------------------------
"                   Go
"-----------------------------------------
Plug 'deoplete-plugins/deoplete-go', { 'do': 'make'}
"-----------------------------------------
"                   JS
"-----------------------------------------
Plug 'carlitux/deoplete-ternjs'
Plug 'ternjs/tern_for_vim'
Plug 'pangloss/vim-javascript'
Plug 'jelera/vim-javascript-syntax'
"-----------------------------------------
"                   JSX
"-----------------------------------------
Plug 'mxw/vim-jsx'
"-----------------------------------------
"                   JSON
"-----------------------------------------
Plug 'elzr/vim-json'
"-----------------------------------------
"                   CSS
"-----------------------------------------
Plug 'hail2u/vim-css3-syntax'
Plug 'ap/vim-css-color'
"-----------------------------------------
"                   HTML
"-----------------------------------------
Plug 'mattn/emmet-vim'
Plug 'Valloric/MatchTagAlways'                " Show matching html/xml tags
Plug 'rstacruz/sparkup', {'rtp': 'vim/'}      " CTRL + E for hacking HTMl
"-----------------------------------------
"                   Neomake
"-----------------------------------------
Plug 'neomake/neomake'
"-----------------------------------------
"                   Typescript
"-----------------------------------------
Plug 'HerringtonDarkholme/yats.vim'
Plug 'mhartington/nvim-typescript', {'do': './install.sh'}
"-----------------------------------------
"                   Ansible
"-----------------------------------------
Plug 'pearofducks/ansible-vim'
Plug 'b4b4r07/vim-ansible-vault'
"-----------------------------------------
"                   Terraform
"-----------------------------------------
Plug 'hashivim/vim-terraform'
Plug 'juliosueiras/vim-terraform-completion'
"-----------------------------------------
"                   Python
"-----------------------------------------
Plug 'ambv/black'                             " Indenting
Plug 'Lokaltog/vim-easymotion'
"-----------------------------------------
"                   Plug End
"-----------------------------------------
call plug#end()
"#########################################

"-----------------------------------------
" Supertab
"-----------------------------------------
let g:SuperTabDefaultCompletionType = "<c-n>" " Supertab from top to bottom
"-----------------------------------------
" Deoplate
"-----------------------------------------
" General

let g:deoplete#enable_at_startup = 1
call deoplete#custom#option({'max_list': 25})
call deoplete#custom#source('_',
    \ 'disabled_syntaxes', ['Comment', 'String'])
let g:deoplete#enable_profile = 1

" Close deoplete popup on enter
inoremap <expr> <TAB> pumvisible() ? "\<C-y>\<cr>" : "\<TAB>"
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return deoplete#mappings#smart_close_popup() . "\<CR>"
endfunction
"
""""""""""""""""TERRAFORM"""""""""""""""""
call deoplete#custom#option('omni_patterns', {
\ 'complete_method': 'omnifunc',
\ 'terraform': '[^ *\t"{=$]\w*',
\})
"""""""""""""""""JS"""""""""""""""""""""""
let g:deoplete#sources#ternjs#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx',
                \ 'vue'
                \ ]

call deoplete#initialize()
"-----------------------------------------
" History
"-----------------------------------------
" Sets how many lines of history VIM has to remember
set history=1000

"-----------------------------------------
" Spelling
"-----------------------------------------
set spell
set title
set number

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_theme = 'gruvbox'
let g:airline#extensions#tabline#enabled = 1
" remove the filetype part
let g:airline_section_x=''
let g:airline_section_y=''
" remove separators for empty sections
let g:airline_skip_empty_sections = 1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

command! StripTrailingWhitespaces :call <SID>StripTrailingWhitespaces()
fun! <SID>StripTrailingWhitespaces()
  if &ft =~ 'vim'
    return
  endif
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
" Strip trailing whitespace
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable
set background=dark

silent! colorscheme gruvbox

hi clear SpellBad
hi SpellBad ctermfg=DarkRed term=undercurl
"-----------------------------------------
" `nocindent smartindent` will allow us to omit semicolons and jump to the next line without auto indentation
filetype indent on
syntax on
filetype plugin indent on
" for Javascript/Typescript
autocmd FileType typescript,javascript,terraform,jinja2  setlocal  shiftwidth=2 tabstop=2 expandtab nocindent smartindent
autocmd FileType coffee                 setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType css,scss,stylus        setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType vim                    setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType tex                    setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType yaml,docker-compose    setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType json                   setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType snippets               setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType jade                   setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType html,htmldjango        setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType python                 setlocal  shiftwidth=4 tabstop=4 expandtab
autocmd FileType go                     setlocal  shiftwidth=4 tabstop=4 noexpandtab
autocmd FileType erlang                 setlocal  shiftwidth=4 tabstop=4 noexpandtab
autocmd FileType make                   setlocal  shiftwidth=4 tabstop=4 noexpandtab
autocmd FileType sh,bash,zsh,readline,nginx,conf setlocal  shiftwidth=2 tabstop=2 expandtab nocindent smartindent
autocmd FileType php                    setlocal  shiftwidth=4 tabstop=4 expandtab
autocmd FileType markdown               setlocal  shiftwidth=4 tabstop=4 expandtab
autocmd FileType ruby                   setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType lua                    setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType sshconfig              setlocal  shiftwidth=4 tabstop=4 expandtab


autocmd FileType javascript,typescript,css,perl,nginx noremap ;; :call InsertSemicolons()<CR>

"pasting from outside
set clipboard=unnamedplus
let mapleader = ","
"-----------------------------------------
" EasyMotion
"-----------------------------------------
let g:EasyMotion_keys = 'hgjfkdls;a'
let g:EasyMotion_grouping = 1
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_do_shade = 1
let g:EasyMotion_use_upper = 1
map f <Plug>(easymotion-bd-fl)
map t <Plug>(easymotion-bd-tl)
map s <Plug>(easymotion-sn)
"-----------------------------------------
" NERDCommenter
"-----------------------------------------
nnoremap <leader>c :call NERDComment(0, "toggle")<CR>
vnoremap <leader>c :call NERDComment(0, "toggle")<CR>
" Add a space before any comment
let g:NERDSpaceDelims = 1
"-----------------------------------------
" Plugin specific settings
"-----------------------------------------
" fzf.vim
"-----------------------------------------
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'vsplit',
  \ 'ctrl-z': 'split' }
let g:fzf_layout = {'up': '~40%'}
let g:fzf_files_options = '--ansi --preview "bat --style=plain {}" --preview-window right:100'
nnoremap b :e #<cr>
nnoremap - :Buffers<cr>
nnoremap = :call FzfGitChangedFilesFromMaster()<cr>
nnoremap <M-=> :Files<cr>
nnoremap <M--> :GitFiles<cr>
nnoremap H :History:<cr>
cnoremap H :History:<cr>

function! FzfGitChangedFilesFromMaster()
  let root = split(system('git rev-parse --show-toplevel'), '\n')[0]
  if v:shell_error
    echom 'Not in git repo'
    return
  endif

  let default_remote_branch = split(system("git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'"), '\n')[0]
  let cmd_diff_files = printf('git --no-pager diff origin/%s --name-only', default_remote_branch)
  let diff_files = split(system(cmd_diff_files), '\n')

  let untracked_files = split(system('git ls-files --others --exclude-standard'), '\n')
  let files = diff_files + untracked_files

  let wrapped = fzf#wrap({
  \ 'source':  files,
  \ 'dir':     root,
  \ 'options': '--ansi --multi --bind=alt-a:select-all --nth 2..,.. --tiebreak=index --prompt "GitFiles?> " --preview ''sh -c "(git diff origin/master --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500"''',
  \ 'up':      '50%',
  \})
  call fzf#run(wrapped)
endfunction

"-----------------------------------------
" vim-oblique
"-----------------------------------------
let g:oblique#incsearch_highlight_all=1

" Python indeting with Black
"-----------------------------------------
if $PYTHON_BLACK_ENABLED
  autocmd BufWritePost *.py :silent Black
endif
"-----------------------------------------
" Movement
"-----------------------------------------
let mapleader = ","
noremap <leader>q q
" Execute macro over a visual selection
xnoremap <leader>q :'<,'>:normal @q<CR>
" Copy til end of line (default is entire line - use `Y` for entire line instead)
nnoremap Y yg_
" Movement
noremap q b
" Movement begin/end of line
noremap Q ^
noremap W g_
noremap $ <nop>
noremap ^ <nop>
" Move to next screen (vim) line instead of file line. Useful for long lines that span over two vim lines
noremap j gj
noremap k gk
nnoremap : <nop>
execute "nnoremap <space> :" . &cedit . "a"
execute "xnoremap <space> :" . &cedit . "a"
execute "nnoremap / /" . &cedit . "a"
execute "xnoremap / /" . &cedit . "a"
execute "nnoremap ? ?" . &cedit . "a"
execute "xnoremap ? ?" . &cedit . "a"
" Exit cmdwindow on esc
nnoremap<C-w> :q<cr>
autocmd CmdwinEnter * nnoremap <buffer> <C-w> :q<cr>
set cmdwinheight=1

nmap m %
vmap m %

set cursorline
hi CursorLine ctermbg=236 guibg=#242321

autocmd CursorMoved,CursorMovedI * call UpdateStatusLine()
autocmd BufWritePost * hi statusline ctermfg=8 ctermbg=233
fu! UpdateStatusLine()
  let bufinfos = getbufinfo()
  for bufinfo in bufinfos
    if bufinfo.changed
      hi statusline ctermfg=46 ctermbg=233
      return
    endif

    hi statusline ctermfg=8 ctermbg=233
  endfor
endfu

"-----------------------------------------
" NERDCommenter
"-----------------------------------------
nnoremap <leader>c :call NERDComment(0, "toggle")<CR>
vnoremap <leader>c :call NERDComment(0, "toggle")<CR>
" Add a space before any comment
let g:NERDSpaceDelims = 1
"-----------------------------------------
" NERDTree
"-----------------------------------------
let NERDTreeShowHidden=1
let NERDTreeIgnore = ['\.pyc$', '\.db$']
noremap <F5> :NERDTreeToggle<CR>
" Open nerdtree on start
"autocmd vimenter * NERDTree
" Open NERDTree on enter and use the non-nerdtree window
" Go to previous (last accessed) window.
"autocmd VimEnter * wincmd p
" When exiting: Close nerdtree if its the only window left
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction
"-----------------------------------------
""
set completeopt-=preview

" (Optional)Hide Info(Preview) window after completions
"autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
"autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>
nnoremap <silent> <F8> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CSS & HTML
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:user_emmet_install_global = 0
autocmd FileType html,css,jsx,tsx EmmetInstall

"-----------------------------------------
" GitGutter
"-----------------------------------------
let g:gitgutter_max_signs=9999
hi SignColumn guibg=black ctermbg=black
nnoremap ggn :GitGutterNextHunk<cr>
nnoremap ggp :GitGutterPrevHunk<cr>
nmap <Leader>s <Plug>GitGutterStageHunk
nmap <Leader>u <Plug>GitGutterUndoHunk
"-----------------------------------------
" Fugitive
"-----------------------------------------
command! Gdom Gdiff origin/master
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
" Remember info about open buffers on close
set viminfo^=%


""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vimgrep searching and cope displaying
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Open vimgrep and put the cursor in the right position
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

" Vimgreps in the current file
map <leader><space> :vimgrep // <C-R>%<C-A><right><right><right><right><right><right><right><right><right>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

" Do :help cope if you are unsure what cope is. It's super useful!
"
" When you search with vimgrep, display your results in cope by doing:
"   <leader>cc
"
" To go to the next search result do:
"   <leader>n
"
" To go to the previous search results do:
"   <leader>p
"
map <leader>cc :botright cope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
map <leader>n :cn<cr>
map <leader>p :cp<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Quickly open a buffer for scripbble
map <leader>q :e ~/buffer<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
  exe "menu Foo.Bar :" . a:str
  emenu Foo.Bar
  unmenu Foo
endfunction

function! VisualSelection(direction) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'gv'
    call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction


" Returns true if paste mode is enabled
function! HasPaste()
  if &paste
    return 'PASTE MODE  '
  en
  return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute("bdelete! ".l:currentBufNum)
  endif
endfunction
"-----------------------------------------
" Neomake
"-----------------------------------------
"
let g:neomake_list_height = 8
let g:neomake_open_list = 2
let g:neomake_python_python_exe = 'python3'
let g:neomake_python_isort_exe = 'isort'

let g:neomake_typescript_tslint_maker = {
    \ 'args': ['--project', 'tsconfig.json'],
    \ 'append_file': 0,
    \ 'errorformat': '%EERROR: %f[%l\, %c]: %m,%E%f[%l\, %c]: %m'
    \ }
let g:neomake_jsx_enabled_makers = ['eslint']
let g:neomake_jsx_eslint_maker = {
    \ 'args': ['--fix'],
    \ }
let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_typescript_enabled_makers = ['tslint', 'tsc']
let g:neomake_python_enabled_makers = ['pylint', 'mypy']

let g:neomake_css_enabled_makers = ['stylelint']
let g:neomake_css_stylelint_maker = {
    \ 'args': ['--fix'],
    \ }

let g:neomake_javascript_eslint_exe = '/usr/bin/eslint'

autocmd BufWritePost * call neomake#Make(1, [], function('s:Neomake_callback'))

function! s:Neomake_callback(options)
  let neomake_lint_and_fix_filetypes = ['eslint', 'tslint', 'stylelint']
  print "a"

  if count(neomake_lint_and_fix_filetypes, a:options.name)
    edit
  endif
endfunction

"-----------------------------------------
" syntastic
"-----------------------------------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" (Optional)Remove Info(Preview) window
set completeopt-=preview
" 25 options
set pumheight=25
"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"~~~~~~~~~~~~~~~~TERRAFORM~~~~~~~~~~~~~~~~
"-----------------------------------------
" juliosueiras/vim-terraform-completion
"-----------------------------------------
autocmd filetype terraform noremap <buffer><silent> gd :call terraformcomplete#JumpRef()<CR>
autocmd filetype terraform noremap <buffer><silent><Leader>o :call terraformcomplete#LookupAttr()<CR>
autocmd filetype terraform noremap <buffer><silent> K :call terraformcomplete#OpenDoc()<CR>

" (Optional) Enable terraform plan to be include in filter
let g:syntastic_terraform_tffilter_plan = 1

" (Optional) Default: 0, enable(1)/disable(0) plugin's keymapping
let g:terraform_completion_keys = 1

" (Optional) Default: 1, enable(1)/disable(0) terraform module registry completion
let g:terraform_registry_module_completion = 0

"-----------------------------------------
" hashivim/vim-terraform
"-----------------------------------------
let g:terraform_commentstring='//%s'
let g:terraform_fold_sections=1
let g:terraform_align=1
let g:terraform_fmt_on_save=1
"-----------------------------------------
" Eclim Java, Scala
"-----------------------------------------
let g:EclimCompletionMethod = 'omnifunc'
"-----------------------------------------
" Random funcs
"-----------------------------------------
command! StripTrailingWhitespaces :call <SID>StripTrailingWhitespaces()
fun! <SID>StripTrailingWhitespaces()
  if &ft =~ 'vim'
    return
  endif
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
" Strip trailing whitespace
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
