"http://rbtnn.hateblo.jp/entry/2014/12/28/010913 #READ scriptencoding
scriptencoding utf-8

let g:python3_host_prog = '/usr/bin/python'
"-----------------------------------------
"                   Plug Installation Helpers
"-----------------------------------------
"Installation helper of euclio/vim-markdown-composer
function! BuildComposer(info)
  if a:info.status !=# 'unchanged' || a:info.force
    if has('nvim')
      !cargo build --release
    else
      !cargo build --release --no-default-features --features json-rpc
    endif
  endif
endfunction
"#########################################
call plug#begin('~/.local/share/nvim/plugged')
"-----------------------------------------
"                   Plugin Manager
"-----------------------------------------
Plug 'VundleVim/Vundle.vim'
"-----------------------------------------
"                   General
"-----------------------------------------
Plug 'Shougo/neopairs.vim'                    " Pair symbols
Plug 'ervandew/supertab'                      " Tab down alts
Plug 'jremmen/vim-ripgrep'                    " Ripgrep
Plug 'junegunn/vim-easy-align'                " Align code around arbitrary characters =,:
Plug 'junegunn/vim-pseudocl'                  " Required by vim-oblique
Plug 'airblade/vim-rooter'                    " Sets root directory to project (git) directory by default
Plug 'kopischke/vim-fetch'                    " Open files at file:line:column
Plug 'scrooloose/nerdcommenter'               " Comment/uncomment source code files
Plug 'scrooloose/nerdtree'                    " Treeview
Plug 'tpope/vim-speeddating'                  " Increment dates
Plug 'tpope/vim-unimpaired'                   " Mappings
Plug 'bfredl/nvim-miniyank'                   " Yank History
Plug 'majutsushi/tagbar'
Plug 'universal-ctags/ctags'
Plug 'kana/vim-textobj-user'
Plug 'rhysd/vim-textobj-anyblock'
"-----------------------------------------
"                   Automation
"-----------------------------------------
Plug 'cohama/lexima.vim'                      " Autoclosing
Plug 'farmergreg/vim-lastplace'               " Open at lastplace
Plug 'lfilho/cosco.vim'                       " Semicolons
Plug 'ntpeters/vim-better-whitespace'         " Whitespace
"-----------------------------------------
"                   Snippets
"-----------------------------------------
Plug 'SirVer/ultisnips'                     " Track the engine.
Plug 'honza/vim-snippets'
"-----------------------------------------
"                   GUI
"-----------------------------------------
Plug 'vim-airline/vim-airline'                " Bottom bar
Plug 'Yggdroot/indentLine'                    " Show line indentation
Plug 'luochen1990/rainbow'                    " Color parantheses
Plug 'junegunn/vim-oblique'                   " Colors search result and sets nohlsearch on cursor move
Plug 'itchyny/vim-cursorword'                 " Underlines the word under the cursor
"-----------------------------------------
"                   Shortkeys
"-----------------------------------------
Plug 'tpope/vim-surround'                     " Delete add surroundings in pair
"-----------------------------------------
"                   Colors
"-----------------------------------------
Plug 'morhetz/gruvbox'                        " Gruvbox theme
"-----------------------------------------
"                   Colors
"-----------------------------------------
Plug 'HendrikPetertje/vimify'                 " Spotify
"-----------------------------------------
"                   GIT
"-----------------------------------------
Plug 'rhysd/git-messenger.vim'                " Show git messages
Plug 'airblade/vim-gitgutter'                 " Show changed git lines
Plug 'tpope/vim-fugitive'
Plug 'ruanyl/vim-gh-line'                     " Open line on Github
Plug 'rhysd/vim-github-actions'               " Vim filetype support for GitHub Actions
"-----------------------------------------
"                   FZF
"-----------------------------------------
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
"-----------------------------------------
"                   FZF
"-----------------------------------------
Plug 'mboughaba/i3config.vim'
"-----------------------------------------
"                   Coc
"-----------------------------------------
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neoclide/coc-json'
Plug 'neoclide/coc-tslint'
Plug 'neoclide/coc-tsserver'
Plug 'neoclide/coc-tslint-plugin'
Plug 'neoclide/coc-stylelint'
Plug 'neoclide/coc-python'
Plug 'neoclide/coc-yaml'
Plug 'neoclide/coc-git'
Plug 'neoclide/coc-html'
Plug 'neoclide/coc-snippets'
"-----------------------------------------
"                   Python
"-----------------------------------------
Plug 'fisadev/vim-isort'
"-----------------------------------------
"                   Markdown
"-----------------------------------------
Plug 'euclio/vim-markdown-composer', { 'do': function('BuildComposer') }
"-----------------------------------------
"                   JS
"-----------------------------------------
Plug 'ternjs/tern_for_vim', { 'do': 'npm install tern-for-vim' }
Plug 'pangloss/vim-javascript'
Plug 'jelera/vim-javascript-syntax'
"-----------------------------------------
"                   Ruby
"-----------------------------------------
Plug 'vim-ruby/vim-ruby'
"-----------------------------------------
"                   JSX
"-----------------------------------------
Plug 'mxw/vim-jsx'
"-----------------------------------------
"                   JSON
"-----------------------------------------
Plug 'elzr/vim-json'
"-----------------------------------------
"                   NGINX
"-----------------------------------------
Plug 'chr4/nginx.vim'
"-----------------------------------------
"                   CSS
"-----------------------------------------
Plug 'hail2u/vim-css3-syntax'
Plug 'ap/vim-css-color'
"-----------------------------------------
"                   HTML
"-----------------------------------------
Plug 'mattn/emmet-vim'
Plug 'Valloric/MatchTagAlways'                " Show matching html/xml tags
Plug 'rstacruz/sparkup', {'rtp': 'vim/'}      " CTRL + E for hacking HTMl
"-----------------------------------------
"                   Neomake
"-----------------------------------------
Plug 'neomake/neomake'
"-----------------------------------------
"                   Typescript
"-----------------------------------------
Plug 'HerringtonDarkholme/yats.vim'
Plug 'mhartington/nvim-typescript', {'do': './install.sh'}
"-----------------------------------------
"                   Ansible
"-----------------------------------------
Plug 'pearofducks/ansible-vim', { 'do': 'cd ./UltiSnips; ./generate.py' }
Plug 'danihodovic/vim-ansible-vault'
"-----------------------------------------
"                   Terraform
"-----------------------------------------
Plug 'hashivim/vim-terraform'
Plug 'juliosueiras/vim-terraform-completion'
"-----------------------------------------
"                   Python
"-----------------------------------------
Plug 'ambv/black'                             " Indenting
Plug 'Lokaltog/vim-easymotion'
"-----------------------------------------
"                   Plug End
"-----------------------------------------
call plug#end()
"#########################################
"
"-----------------------------------------
" General
"-----------------------------------------
let mapleader = ','
" vint: -ProhibitSetNoCompatible
set nocompatible
" vint: +ProhibitSetNoCompatible
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes
"-----------------------------------------
" Autocompelete
"-----------------------------------------
augroup autocompelte
  "autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
augroup END
"-----------------------------------------
" History
"-----------------------------------------
" Sets how many lines of history VIM has to remember
set history=300
"-----------------------------------------
" Spelling
"-----------------------------------------
set spell
set title
set number
"-----------------------------------------
" Moving around, tabs, windows and buffers
"-----------------------------------------
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

nmap m %
vmap m %
set cmdwinheight=1

noremap q b
" Movement begin/end of line
noremap Q ^
noremap W g_
noremap $ <nop>
noremap ^ <nop>
nnoremap : <nop>

" Disable keys to get more used to hjkl
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" Window movements
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-H> <C-W>h
noremap <C-L> <C-W>l

execute 'nnoremap <space> :' . &cedit . 'a'
execute 'xnoremap <space> :' . &cedit . 'a'
execute 'nnoremap / /' . &cedit . 'a'
execute 'xnoremap / /' . &cedit . 'a'
execute 'nnoremap ? ?' . &cedit . 'a'
execute 'xnoremap ? ?' . &cedit . 'a'

nnoremap <C-w> :wq <cr>                       " Force Quit-Save on control W
nnoremap <C-q> :q  <cr>                      " Force Quit on control q
"-----------------------------------------
"                 Files, backups and undo
"-----------------------------------------
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set noswapfile
"-----------------------------------------
"                 Text, tab and indent related
"-----------------------------------------
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 500 characters
set linebreak
set textwidth=500

set autoindent "Auto indent
set smartindent "Smart indent
set wrap "Wrap lines
"-----------------------------------------
"                 VIM user interface
"-----------------------------------------
" Set 7 lines to the cursor - when moving vertically using j/k
set scrolloff=7

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hidden

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set matchtime=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set timeoutlen=500
"-----------------------------------------
"               Colors and Fonts
"-----------------------------------------
set termguicolors
syntax enable
set background=dark

silent! colorscheme gruvbox

hi clear SpellBad
hi SpellBad ctermfg=DarkRed term=undercurl

set cursorline
hi CursorLine ctermbg=236 guibg=#242321

"-----------------------------------------
"               Indentation
"-----------------------------------------
" `nocindent smartindent` will allow us to omit semicolons and jump to the next line without auto indentation
filetype on
filetype indent on
filetype plugin indent on
syntax on
" for Javascript/Typescript
augroup indentation
  autocmd FileType typescript,javascript,terraform,jinja2  setlocal  shiftwidth=2 tabstop=2 expandtab nocindent smartindent
  autocmd FileType coffee                 setlocal  shiftwidth=2 tabstop=2 expandtab
  autocmd FileType css,scss,stylus        setlocal  shiftwidth=2 tabstop=2 expandtab
  autocmd FileType vim                    setlocal  shiftwidth=2 tabstop=2 expandtab
  autocmd FileType tex                    setlocal  shiftwidth=2 tabstop=2 expandtab
  autocmd FileType yaml,docker-compose    setlocal  shiftwidth=2 tabstop=2 expandtab
  autocmd FileType json                   setlocal  shiftwidth=2 tabstop=2 expandtab
  autocmd FileType json syntax match Comment +\/\/.\+$+
  autocmd FileType snippets               setlocal  shiftwidth=2 tabstop=2 expandtab
  autocmd FileType jade                   setlocal  shiftwidth=2 tabstop=2 expandtab
  autocmd FileType html,htmldjango        setlocal  shiftwidth=2 tabstop=2 expandtab
  autocmd FileType python                 setlocal  shiftwidth=4 tabstop=4 expandtab
  autocmd FileType go                     setlocal  shiftwidth=4 tabstop=4 noexpandtab
  autocmd FileType erlang                 setlocal  shiftwidth=4 tabstop=4 noexpandtab
  autocmd FileType make                   setlocal  shiftwidth=4 tabstop=4 noexpandtab
  autocmd FileType sh,bash,zsh,readline,nginx,conf setlocal  shiftwidth=2 tabstop=2 expandtab nocindent smartindent
  autocmd FileType php                    setlocal  shiftwidth=4 tabstop=4 expandtab
  autocmd FileType markdown               setlocal  shiftwidth=4 tabstop=4 expandtab
  autocmd FileType ruby                   setlocal  shiftwidth=2 tabstop=2 expandtab
  autocmd FileType lua                    setlocal  shiftwidth=2 tabstop=2 expandtab
  autocmd FileType sshconfig              setlocal  shiftwidth=4 tabstop=4 expandtab
augroup END

"pasting from outside
set clipboard=unnamedplus
"-----------------------------------------
"               Spell checking
"-----------------------------------------
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg                           " Add word to spellcheck
map <leader>s? z=
"-----------------------------------------
"               Misc
"-----------------------------------------
" Quickly open a buffer for scripbble
map <leader>q :e ~/buffer<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>
"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"
"                                      Plugin specific settings
"
"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"-----------------------------------------
" Cosco.vim
"-----------------------------------------
let g:cosco_filetype_whitelist = ['javascript', 'typescript', 'css', 'perl', 'nginx']
"-----------------------------------------
" Whitespace
"-----------------------------------------
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0
let g:better_whitespace_verbosity=1
let g:current_line_whitespace_disabled_soft=1
let g:better_whitespace_filetypes_blacklist=['zsh', 'html', 'vim', 'diff', 'gitcommit', 'unite', 'qf', 'help']
let g:better_whitespace_ctermcolor='red'
augroup whitespace
  autocmd BufWritePre * StripWhitespace
augroup END
"-----------------------------------------
" Lastplace
"-----------------------------------------
let g:lastplace_ignore = 'gitcommit,gitrebase,svn,hgcommit'
"-----------------------------------------
" Airline
"-----------------------------------------
let g:airline_theme = 'gruvbox'
let g:airline#extensions#tabline#enabled = 1
" remove the filetype part
let g:airline_section_x=''
let g:airline_section_y=''
" remove separators for empty sections
let g:airline_skip_empty_sections = 1
"-----------------------------------------
" Easymotion
"-----------------------------------------
let g:EasyMotion_keys = 'hgjfkdls;a'
let g:EasyMotion_grouping = 1
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_do_shade = 1
let g:EasyMotion_use_upper = 1
map f <Plug>(easymotion-bd-fl)
map t <Plug>(easymotion-bd-tl)
map s <Plug>(easymotion-sn)
"-----------------------------------------
" Supertab
"-----------------------------------------
let g:SuperTabDefaultCompletionType = '<c-n>' "Supertab from top to bottom
let g:SuperTabClosePreviewOnPopupClose = 1
"-----------------------------------------
" IndentLine
"-----------------------------------------
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
"-----------------------------------------
" fzf.vim
"-----------------------------------------
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'vsplit',
  \ 'ctrl-z': 'split' }

let g:fzf_layout = {'up': '~40%'}
let g:fzf_files_options = '--ansi --preview "bat --style=plain {}" --preview-window right:100'
nnoremap b :e #<cr>
nnoremap - :Buffers<cr>
nnoremap = :call FzfGitChangedFilesFromMaster()<cr>
nnoremap <M-=> :Files<cr>
nnoremap <M--> :GitFiles<cr>
nnoremap H :History:<cr>
cnoremap H :History:<cr>

function! FzfGitChangedFilesFromMaster()
  let root = split(system('git rev-parse --show-toplevel'), '\n')[0]
  if v:shell_error
    echom 'Not in git repo'
    return
  endif

  let default_remote_branch = split(system("git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'"), '\n')[0]
  let cmd_diff_files = printf('git --no-pager diff origin/%s --name-only', default_remote_branch)
  let diff_files = split(system(cmd_diff_files), '\n')

  let untracked_files = split(system('git ls-files --others --exclude-standard'), '\n')
  let files = diff_files + untracked_files

  let wrapped = fzf#wrap({
  \ 'source':  files,
  \ 'dir':     root,
  \ 'options': '--ansi --multi --bind=alt-a:select-all --nth 2..,.. --tiebreak=index --prompt "GitFiles?> " --preview ''sh -c "(git diff origin/master --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500"''',
  \ 'up':      '50%',
  \})
  call fzf#run(wrapped)
endfunction

"-----------------------------------------
" vim-oblique
"-----------------------------------------
let g:oblique#incsearch_highlight_all=1
"-----------------------------------------
" Python Black
"-----------------------------------------
if $PYTHON_BLACK_ENABLED
  augroup python
    autocmd BufWritePost *.py :silent Black
  augroup END
endif
"-----------------------------------------
" Coc
"-----------------------------------------
set updatetime=300
" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
augroup Coc
  autocmd CursorHold * silent call CocActionAsync('highlight')
augroup END
"-----------------------------------------
" Coc-snippets
"-----------------------------------------
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)
"-----------------------------------------
" Python Isort
"-----------------------------------------
let g:vim_isort_map = '<C-i>'
"-----------------------------------------
" Miniyank
"-----------------------------------------
map p <Plug>(miniyank-autoput)
map P <Plug>(miniyank-autoPut)

map <leader>p <Plug>(miniyank-startput)
map <leader>P <Plug>(miniyank-startPut)

map <leader>n <Plug>(miniyank-cycle)
map <leader>N <Plug>(miniyank-cycleback)
"-----------------------------------------
" Ansible-vim
"-----------------------------------------
let g:ansible_extra_keywords_highlight = 1
augroup ansible
  au BufRead,BufNewFile */ansible/*.yml set filetype=yaml.ansible
augroup END
"-----------------------------------------
" Ansible-vault
"-----------------------------------------
function EncryptVault()
  :AnsibleVaultEncrypt
  edit
endfunction

nnoremap <Leader>ve :call EncryptVault() <CR>
nnoremap <Leader>vd :AnsibleVaultDecrypt <CR> :edit <CR>
"-----------------------------------------
" NERDCommenter
"-----------------------------------------
vnoremap <leader>c :call NERDComment(0, "toggle")<CR>
" Add a space before any comment
let g:NERDSpaceDelims = 1
"-----------------------------------------
" NERDTree
"-----------------------------------------
let NERDTreeShowHidden=1
let NERDTreeIgnore = ['\.pyc$', '\.db$']
noremap <F5> :NERDTreeToggle<CR>
" When exiting: Close nerdtree if its the only window left
augroup nerdtree
  autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
augroup END
" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
  if exists('t:NERDTreeBufName')
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr('$') == 1
        q
      endif
    endif
  endif
endfunction
"-----------------------------------------
" Tagbar
"-----------------------------------------
let g:tagbar_type_ansible = {
	\ 'ctagstype' : 'ansible',
	\ 'kinds' : [
		\ 't:tasks'
	\ ],
	\ 'sort' : 0
\ }

let g:tagbar_type_typescript = {
  \ 'ctagsbin' : 'tstags',
  \ 'ctagsargs' : '-f-',
  \ 'kinds': [
    \ 'e:enums:0:1',
    \ 'f:function:0:1',
    \ 't:typealias:0:1',
    \ 'M:Module:0:1',
    \ 'I:import:0:1',
    \ 'i:interface:0:1',
    \ 'C:class:0:1',
    \ 'm:method:0:1',
    \ 'p:property:0:1',
    \ 'v:variable:0:1',
    \ 'c:const:0:1',
  \ ],
  \ 'sort' : 0
\ }

let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:Heading_L1',
        \ 'i:Heading_L2',
        \ 'k:Heading_L3'
    \ ]
\ }

noremap <F6> :TagbarToggle <CR>
"-----------------------------------------
" Tagbar & Nerdtree
"-----------------------------------------
noremap <F7> :TagbarToggle <CR> :NERDTreeToggle <CR>
"-----------------------------------------
" GitMessenger
"-----------------------------------------
nnoremap <leader>gm :GitMessenger <CR>
"-----------------------------------------
""
set completeopt-=menu,preview,noselect


" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file

" Fast saving
nmap <leader>w :w!<CR>

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CSS & HTML
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:user_emmet_install_global = 0
augroup emmet
  autocmd FileType html,css,jsx,tsx EmmetInstall
augroup END
"-----------------------------------------
" GitGutter
"-----------------------------------------
let g:gitgutter_max_signs=9999
hi SignColumn guibg=black ctermbg=black
nnoremap ggn :GitGutterNextHunk<cr>
nnoremap ggp :GitGutterPrevHunk<cr>
nmap <Leader>s <Plug>GitGutterStageHunk
nmap <Leader>u <Plug>GitGutterUndoHunk
"-----------------------------------------
" Github line
"-----------------------------------------
let g:gh_open_command = 'fn() { echo "$@" | xclip -selection clipboard | firefox "$@" }; fn '
"-----------------------------------------
" Fugitive
"-----------------------------------------
command! Gdom Gdiff origin/master
"-----------------------------------------
" Rainbow Parantheses
"-----------------------------------------
let g:rainbow_active = 1
"-----------------------------------------
" Vimify Spotify
"-----------------------------------------
function! SearchSpotify()
  let name = input('Enter song name: ')
  execute 'SpSearch ' l:name
endfunction

let g:spotify_token = 'Y2JlYWQ3NzJhMGJhNDM0NGI4YWUyZjNhMWQ2NjlkMjY6MzVhYmRjYTc5YTIyNGVlMDg4YTQ5NmYzNzk0ODhhMzQ='
nnoremap <leader><S-s> :SpToggle <CR>
nnoremap <leader><S-n> :SpNext <CR>
nnoremap <leader><S-p> :SpPrevious <CR>
nnoremap <leader><S-e> :SpSelect <CR> :bd <CR>
nnoremap <leader><C-s> :call SearchSpotify() <CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vimgrep searching and cope displaying
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Open vimgrep and put the cursor in the right position
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

" Vimgreps in the current file
map <leader><space> :vimgrep // <C-R>%<C-A><right><right><right><right><right><right><right><right><right>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

map <leader>cc :botright cope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
map <leader>n :cn<cr>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
  exe 'menu Foo.Bar :' . a:str
  emenu Foo.Bar
  unmenu Foo
endfunction

function! VisualSelection(direction) range
  let l:saved_reg = @"
  execute 'normal! vgvy'

  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, '\n$', '', '')

  if a:direction ==# 'b'
    execute 'normal ?' . l:pattern . '^M'
  elseif a:direction ==# 'gv'
    call CmdLine('vimgrep' . '/'. l:pattern . '/' . ' **/*.')
  elseif a:direction ==# 'replace'
    call CmdLine('%s' . '/'. l:pattern . '/')
  elseif a:direction ==# 'f'
    execute 'normal /' . l:pattern . '^M'
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

" Returns true if paste mode is enabled
function! HasPaste()
  if &paste
    return 'PASTE MODE  '
  en
  return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
  let l:currentBufNum = bufnr('%')
  let l:alternateBufNum = bufnr('#')

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr('%') == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute('bdelete! '.l:currentBufNum)
  endif
endfunction
"-----------------------------------------
" Markdown
"-----------------------------------------
" Disable autostart of md composer
" let g:markdown_composer_autostart = 0
let g:markdown_composer_browser = 'firefox --new-window'
"-----------------------------------------
" Neomake
"-----------------------------------------
let g:neomake_list_height = 8
let g:neomake_open_list = 2

let g:neomake_typescript_tslint_maker = {
    \ 'args': ['--project', 'tsconfig.json'],
    \ 'append_file': 0,
    \ 'errorformat': '%EERROR: %f[%l\, %c]: %m,%E%f[%l\, %c]: %m'
    \ }

let g:neomake_jsx_enabled_makers = ['eslint']
let g:neomake_jsx_eslint_args = ['--fix', '--format=compact']

let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_javascript_eslint_args = ['--fix', '--format=compact']

let g:neomake_javascript_eslint_exe = '/usr/bin/eslint'

let g:neomake_python_enabled_makers = ['pylint', 'mypy']
let g:neomake_typescript_enabled_makers = ['tslint', 'tsc']

let g:neomake_python_python_exe = 'python3'

let g:neomake_sh_enabled_makers = ['shellcheck']

let g:neomake_vim_enabled_makers = ['vint']

let g:neomake_ansible_enabled_makers = ['ansiblelint', 'yamllint']

let g:neomake_yamllint_enabled_makers = ['yamllint']

let g:neomake_css_enabled_makers = ['stylelint']
let g:neomake_css_stylelint_args = ['--fix']

augroup nmake
  autocmd BufWritePost * call neomake#Make(1, [], function('s:Neomake_callback'))
augroup END

function! s:Neomake_callback(options)
  let neomake_lint_and_fix_filetypes = ['eslint', 'tslint', 'stylelint']

  if count(neomake_lint_and_fix_filetypes, a:options.name)
    edit
  endif
endfunction
"-----------------------------------------
" juliosueiras/terraform-lsp
"-----------------------------------------
augroup tf_ac
  autocmd filetype terraform noremap <buffer><silent> <leader>tr :call terraformcomplete#JumpRef()<CR>
  autocmd filetype terraform noremap <buffer><silent> <leader>ta :call terraformcomplete#LookupAttr()<CR>
  autocmd filetype terraform noremap <buffer><silent> <leader>tf :call terraformcomplete#OpenDoc()<CR>
augroup END

" (Optional) Default: 0, enable(1)/disable(0) plugin's keymapping
let g:terraform_completion_keys = 1
"-----------------------------------------
" hashivim/vim-terraform
"-----------------------------------------
let g:terraform_commentstring='//%s'
let g:terraform_fold_sections=1
let g:terraform_align=1
let g:terraform_fmt_on_save=1
