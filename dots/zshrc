### Set/unset ZSH options
#########################
setopt INC_APPEND_HISTORY SHARE_HISTORY
setopt APPEND_HISTORY
unsetopt BG_NICE
setopt CORRECT
setopt EXTENDED_HISTORY
setopt MENUCOMPLETE
setopt ALL_EXPORT

### Set/unset  shell options
############################
setopt   notify globdots correct pushdtohome cdablevars autolist
setopt   correctall autocd recexact longlistjobs
setopt   autoresume histignoredups pushdsilent
setopt   autopushd pushdminus extendedglob rcquotes mailwarning
unsetopt bgnice autoparamslash
#############################################
source ~/.zplug/init.zsh
#############################################
# Z Plugins
#############################################
zplug "aloxaf/fzf-tab", defer:3
zplug "zdharma/fast-syntax-highlighting", defer:2
zplug "adinhodovic/docker-alias", use:zshrc
zplug "adinhodovic/docker-compose-alias", use:zshrc
zplug "adinhodovic/ansible-alias", use:zshrc
zplug "adinhodovic/git-alias", use:zshrc
zplug "adinhodovic/terraform-alias", use:zshrc
zplug "adinhodovic/kubernetes-alias", use:zshrc
zplug "adinhodovic/calc.plugin.zsh", use:zshrc              # zsh calc
zplug "djui/alias-tips"                                     # Give tips when not using aliases
zplug "popstas/zsh-command-time"                            # Time activities
zplug "wfxr/forgit"                                         # Git FZF utility tool
zplug "b4b4r07/emoji-cli"                                   # Emoji cli
zplug "hlissner/zsh-autopair", defer:2                      # Autopair
zplug "Aloxaf/fzf-tab"
zplug "plugins/kubectl", from:oh-my-zsh, defer:2
zplug "bonnefoa/kubectl-fzf", defer:3
zplug "go-task/task", use:"completion/zsh/_task"
zplug "plugins/ssh-agent",   from:oh-my-zsh
zplug "jonmosco/kube-ps1", use:kube-ps1.sh
#zplug "sorin-ionescu/prezto", use:init.zsh                 # https://github.com/sorin-ionescu/prezto
zplug "modules/command-not-found", from:prezto              # Command-not-found
zplug "modules/archive", from:prezto                        # Archive
zplug "olivierverdier/zsh-git-prompt", use:zshrc.sh         # git-prompt
zplug "skywind3000/z.lua", use:z.lua.plugin.zsh
#############################################
# ZPlug
#############################################
# Then, source plugins and add commands to $PATH
zplug load
#############################################
# Z Modules Autoload zsh modules when they are referenced
#################################################
autoload -U history-search-end
zmodload -a zsh/stat stat
zmodload -a zsh/zpty zpty
zmodload -a zsh/zprof zprof
zmodload zsh/zpty

#############################################
# Zsh Time
#############################################

ZSH_COMMAND_TIME_MIN_SECONDS=60

#############################################
# SSH Agent
zstyle :omz:plugins:ssh-agent agent-forwarding on
#############################################

#############################################
# Completion Styles
#############################################

zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path ~/.zsh/cache/$HOST

# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

# Enable reverse-menu-complete
zmodload zsh/complist
# Highlight selected option in tab completion menu
zstyle ':completion:*' menu select

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions' ignored-patterns '_*'

zstyle ":completion:*:git-checkout:*" sort false
zstyle ':completion:*:descriptions' format '[%d]'

# Use https://github.com/trapd00r/LS_COLORS for LS_COLORS
. /usr/share/LS_COLORS/dircolors.sh
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Fzf-tab

enable-fzf-tab

zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'lsd -1 --color=always $realpath'
zstyle ':fzf-tab:complete:_zlua:*' query-string input

# Set vi-mode
bindkey -v

# Move to the end of the line and exclude whitespace
tmux-copy-mode() {
if [ -n "$TMUX" ]; then
  tmux copy-mode
fi
}

# Paste from clipboard
vi-append-x-selection-before () {
RBUFFER="$(xclip -o)$RBUFFER"
}
vi-append-x-selection-after () {
CURSOR=$((CURSOR+1))
RBUFFER="$(xclip -o)$RBUFFER"
}
function noop () {}
zle -N noop

end-of-line-no-whitespace() {
  zle vi-end-of-line
  zle vi-backward-word-end
}
zle -N end-of-line-no-whitespace

zle -N vi-append-x-selection-before
zle -N vi-append-x-selection-after

zle -N tmux-copy-mode

# Key bindings. Wanna find weird keycodes? use cat
# Fix backspace delete in vi-mode
# http://www.zsh.org/mla/users/2009/msg00812.html
bindkey "^?" backward-delete-char
# Movement bindings
bindkey -M vicmd q vi-backward-word
bindkey -M vicmd 0 noop
bindkey -M vicmd Q vi-beginning-of-line
bindkey -M vicmd $ noop
bindkey -M vicmd W end-of-line-no-whitespace

bindkey -M vicmd P vi-append-x-selection-before
bindkey -M vicmd p vi-append-x-selection-after

function tmux-search {
  tmux copy-mode && tmux send-keys '?' && tmux send-keys \
    BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace
}
zle -N tmux-search

bindkey -M vicmd '/' tmux-search
bindkey -M vicmd v tmux-copy-mode

# Reverse scrolling shift+tab
bindkey -M menuselect '^[[Z' reverse-menu-complete

################################################
# General
################################################
export EDITOR="nvim"
################################################
# ZSH-Autosuggest
################################################
bindkey '^I ' autosuggest-accept
################################################
# Aliases
################################################
# Allows 256 colors as background in terminal, used for Vi
alias cat="bat"
# lsd instead of ls
alias ls='lsd'
alias cl='clear'
alias l='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias lt='ls --tree'

alias n="nnn"

alias c='z -I'
alias cc='z -c'
alias c.="cd .."
alias c..="cd ../.."
alias c...="cd ../../.."

# Globally ...
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g ......='../../../../..'

create_envrc () {
  envrc_content=""
  if [ -e "./.env" ]; then
    envrc_content+='dotenv\n\n'
  fi
  envrc_content+='source .venv/bin/activate'
  echo $envrc_content > .envrc
}

alias cvenv="python -m venv .venv"
alias cenvrc=create_envrc

alias '?'='googler'
alias define='googler -n 2 define'

alias seda=search_and_replace_all
# Usecase raf regexA regexB **
alias raf=rename_all_files

search_and_replace_all () {
  rg "$3" --files-with-matches | xargs sed -i "s/$1/$2/g"
}

rename_all_files () {
  rename -v "$1" "$2" "$3"
}

alias tf='terraform'
alias top='vtop --theme gruvbox'

alias xc='xclip -sel clip'
alias v='nvim'
alias ps='procs'
alias s-hl='vps-sync hl-ops-jumphost ~/company/honeylogic/ops ~/ops ops'
alias t=taskwarrior
alias tempdir='tempdir=$(mktemp -d) && cd $tempdir'

# cd shortkeys
alias cd.="cd .."
alias cd..="cd ../.."
alias cd...="cd ../../.."
alias cd....='cd ../../../..'

# Z.lua
alias zz='z -c'      # restrict matches to subdirs of $PWD
alias zi='z -i'      # cd with interactive selection
alias zf='z -I'      # use fzf to select in multiple matches
alias zb='z -b'      # quickly cd to the parent directory
alias zh='z -I -t .'

alias tempdir='tempdir=$(mktemp -d) && cd $tempdir'
alias cp='cp -v '
alias mv='mv -v '
alias h="history"
alias cd-="cd -"
alias setxkbmapcaps="setxkbmap -option caps:swapescape68"
alias o='xdg-open'
alias v=nvim
alias dus=diskus

alias aws_kubeconfig="aws eks update-kubeconfig --name $1 --alias $2"

alias copy="xclip -sel clip < $1"

function vf {
  if [ "$#" -lt 1 ]; then
    return 1
  fi
  results=$(ag --nogroup --column --color "$@" | fzf --multi --ansi --prompt 'AG>')
  if [ -n "$results" ]; then
    files=$(echo $results | awk -F ':' '{print $1":"$2":"$3}' | tr '\r\n' ' ')
    eval nvim "$files"
  fi
}

fcommit() {
  local commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
  local commit=$(echo "$commits" | fzf --tac +s -m -e --ansi --reverse) &&
  echo -n $(echo "$commit" | sed "s/ .*//")
}

### Set variables
#################
export PATH="$PATH:/usr/local/bin:/usr/local/sbin/:/home/adin/go/bin/"
export PATH="$PATH:$HOME/.poetry/bin"
export PATH="$PATH:$HOME/.local/bin"
export PATH="$PATH:$HOME/.krew/bin"
export PATH="$PATH:/home/adin/.local/bin/"
export PATH="$PATH:/home/adin/.gem/ruby/2.6.0/bin"
export PATH="$PATH:/.local/share/nvim/plugged/vim-terraform-completion/bin/tffilter"
export PATH="$PATH:/home/adin/work/tidepool/development/bin"
export PATH="$PATH:/home/adin/work/tidepool/tpctl/cmd"

export PYTHONPATH="/usr/local/lib/python3.8/site-packages:$PYTHONPATH"

export TERMINAL=/usr/bin/alacritty
export TERM=screen-256color

export RIPGREP_CONFIG_PATH=~/.ripgreprc

NPM_PACKAGES="${HOME}/.npm-packages"
export PATH="$NPM_PACKAGES/bin:$PATH"
export NODE_PATH="${NPM_PACKAGES}/lib/node_modules"

# Unset manpath so we can inherit from /etc/manpath via the `manpath` command
unset MANPATH # delete if you already modified MANPATH elsewhere in your config
export MANPATH="$NPM_PACKAGES/share/man:$(manpath)"

### History
#################
HISTFILE=$HOME/.zhistory
HISTSIZE=50000
SAVEHIST=50000
HOSTNAME="`hostname`"
##################################
### Set prompt
##################################
unsetopt ALL_EXPORT
PROMPT='%{$fg[blue]%}%1d%{$reset_color%} $(git_super_status) '
RPROMPT='%{$fg[blue]%}$(kube_ps1)%{$reset_color%}'
### Bind keys
#############
bindkey "^?" backward-delete-char
bindkey '^[OH' beginning-of-line
bindkey '^[OF' end-of-line
bindkey '^[[5~' up-line-or-history
bindkey '^[[6~' down-line-or-history
bindkey "^r" history-incremental-search-backward
bindkey ' ' magic-space    # also do history expansion on space

########################################################
# FZF
########################################################
fzf_opts=(
  --multi
  --reverse
  --bind ctrl-space:toggle-preview
  --bind ctrl-j:down
  --bind ctrl-k:up
  --bind ctrl-d:half-page-down
  --bind ctrl-u:half-page-up
  --bind ctrl-s:toggle-sort
  --bind ctrl-e:preview-down
  --bind ctrl-y:preview-up
)
export FZF_DEFAULT_OPTS="${fzf_opts[*]}"
export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude .git"
export FZF_CTRL_R_OPTS='--exact'


if which fd &> /dev/null; then
  # To apply the command to CTRL-T as well
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# Custom fzf file widget.
# The differences are:
# 1) We add a space between LBUFFER and the selection we've made by pushing the
#    cursor one step forward before inserting our selection
# 2) After the insert we end up in viins mode instead of vicmd
fzf-file-widget() {
  CURSOR=$(($CURSOR + 1))
  LBUFFER="${LBUFFER}$(__fsel)"
  local ret=$?
  zle -K viins
  zle redisplay
  typeset -f zle-line-init >/dev/null && zle zle-line-init
  return $ret
}

stty stop undef
function fzf-ssh {
  all_matches=$(grep -P -r "Host\s+\w+" ~/.ssh/ | grep -v '\*')
  only_host_parts=$(echo "$all_matches" | awk '{print $NF}')
  selection=$(echo "$only_host_parts" | fzf)
  echo $selection

  if [ ! -z $selection ]; then
    BUFFER="ssh $selection"
    zle accept-line
  fi
  zle reset-prompt
}
zle     -N     fzf-ssh

function fzf-docker-logs {
  matches=$(docker ps --format 'table {{ .Names }}\t{{ .Image }}')
  selection=$(echo $matches | fzf --header-lines=1 | awk '{print $1}')
  if [ ! -z $selection ]; then
    args="${@:-"--tail 100 -f"}"
    BUFFER="docker logs -f --tail 100 $args $selection"
    zle accept-line
  fi
}
zle -N fzf-docker-logs

function fzf-docker-exec {
  matches=$(docker ps --format 'table {{ .Names }}\t{{ .Image }}')
  selection=$(echo $matches | fzf --header-lines=1 | awk '{print $1}')
  if [ ! -z $selection ]; then
    cmd="${@:-"sh -c 'bash || sh'"}"
    BUFFER="docker exec -it $selection $cmd"
    zle accept-line
  fi
}
zle -N fzf-docker-exec

fcommit() {
  local commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
  local commit=$(echo "$commits" | fzf --tac +s -m -e --ansi --reverse) &&
  echo -n $(echo "$commit" | sed "s/ .*//")
}

function fzf-taskwarrior {
  matches_common="rc._forcecolor:on rc.defaultwidth:120 rc.detection:off rc.verbose=no"
  matches_few="taskwarrior due.before:today+14d limit=30 $matches_common"
  matches_many="taskwarrior due.before:today+365d limit=100 $matches_common"
  start_cmd="ctrl-s:execute(taskwarrior start {1})+abort"
  delete_cmd="ctrl-x:reload(taskwarrior {1} delete rc.confirmation:no rc.verbose=nothing && eval $matches_few)+clear-query"
  done_cmd="ctrl-f:reload(taskwarrior done {1} rc.verbose=nothing && eval $matches_few)+clear-query"
  show_more_cmd="ctrl-m:reload(eval $matches_many)"
  selection=$(eval "$matches_few" |
    fzf --bind "$start_cmd,$delete_cmd,$done_cmd,$show_more_cmd" \
    --header-lines=2 --ansi --layout=reverse --border \
    --preview 'taskwarrior {1} rc._forcecolor:on'
  )

  if [ ! -z $selection ]; then
    BUFFER=""
    zle accept-line
  fi
}
zle -N fzf-taskwarrior

bindkey -M vicmd '\-'   fzf-file-widget

bindkey -M vicmd '^r'   fzf-history-widget
bindkey -M viins '^r'   fzf-history-widget

bindkey -M vicmd '^s'   fzf-ssh
bindkey -M viins '^s'   fzf-ssh

bindkey -M vicmd '^l'   fzf-docker-logs
bindkey -M viins '^l'   fzf-docker-logs

bindkey -M vicmd '^x'   fzf-docker-exec
bindkey -M viins '^x'   fzf-docker-exec

bindkey -M viins '^w'   fzf-taskwarrior
bindkey -M vicmd '^w'   fzf-taskwarrior

zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup

function awsprofile {
  profile=$(grep --text -E '\[.+\]' ~/.aws/credentials | tr -d '[]' | fzf)
  if [ -n "$profile" ]; then
    echo $profile > ~/.aws_profile
    export AWS_PROFILE=$profile
  fi
}

function awsregion {
  regions=(
    "us-east-2        (Ohio)"
    "us-east-1        (N. Virginia)"
    "us-west-1        (N. California)"
    "us-west-2        (Oregon)"
    "ap-south-1       (Mumbai)"
    "ap-northeast-3   (Osaka-Local)"
    "ap-northeast-2   (Seoul)"
    "ap-southeast-1   (Singapore)"
    "ap-southeast-2   (Sydney)"
    "ap-northeast-1   (Tokyo)"
    "ca-central-1     (Canada)"
    "cn-north-1       (Beijing)"
    "cn-northwest-1   (Ningxia)"
    "eu-central-1     (Frankfurt)"
    "eu-west-1        (Ireland)"
    "eu-west-2        (London)"
    "eu-west-3        (Paris)"
    "eu-north-1       (Stockholm)"
    "sa-east-1        (São Paulo)"
  )
  selected=$(printf '%s\n' "${regions[@]}" | fzf --sort | awk '{print $1}')
  if [ -n "$selected" ]; then
    echo $selected > ~/.aws_region
    export AWS_DEFAULT_REGION=$selected
  fi
}

[ -f ~/.aws/profile ] && export AWS_PROFILE=$(cat ~/.aws/profile)
[ -f ~/.aws/region ]  && export AWS_DEFAULT_REGION=$(cat ~/.aws/region)

# Add direnv
eval "$(direnv hook zsh)"

# added by travis gem
[ -f /home/adin/.travis/travis.sh ] && source /home/adin/.travis/travis.sh

#############################################
# Automation
#############################################
function git-standup-last-week() {
  python <<EOF
from datetime import date, timedelta
import subprocess
import os
today = date.today()
beginning_of_last_week = today - timedelta(days=today.weekday() + 7)
end_of_last_week = beginning_of_last_week + timedelta(days=7)
cmd = f"git standup -A {beginning_of_last_week} -B {end_of_last_week} -s"
home = os.path.expanduser("~")
dirs = [
  os.path.join(home, ".dotfiles"),
  os.path.join(home, "company"),
  os.path.join(home, "personal"),
]
for dir in dirs:
  subprocess.run(cmd, shell=True, cwd=dir)
EOF
}

#############################################
# Kubectl
#############################################

export KUBE_EDITOR="nvim"

function k8s-delete-all-namespace-resources {
  kubectl delete "$(kubectl api-resources --namespaced=true --verbs=delete -o name | tr "\n" "," | sed -e 's/,$//')" --all
}

#############################################
# Kubectl fzf
#############################################

export KUBECTL_FZF_OPTIONS=(-1 --header-lines=2 --layout reverse -e --no-sort --bind space:accept --bind tab:down)

#############################################
# Postgres
#############################################

# custom_pg_dump honeylogic-db.com postgres hodovi_cc 5432
function custom_pg_dump {
  rm -rf $PWD/db_dump/*
  docker run -v $PWD/db_dump:/data/db_dump/ -i --rm --entrypoint='' --net=host postgres:11.5-alpine pg_dump -h $1 -U $2 -d $3 -p $4 -F d -f /data/db_dump
}

function pg_drop_db {
  dc exec postgres psql -U postgres -c "DROP DATABASE $1;"
}

function pg_create_db {
  dc exec postgres psql -U postgres -c "CREATE DATABASE $1;"
}

function pg_create_extension {
  dc exec postgres psql -U postgres -c "CREATE EXTENSION pg_trgm;"
}

function pg_create_user {
  dc exec postgres psql -U postgres -c "CREATE USER $1;"
}

function custom_pg_restore {
  dc exec postgres pg_restore --clean -d $1 -h 0.0.0.0 -U postgres /tmp/db_dump/
}

function pg_drop_and_restore {
  local pg_container=$(docker-compose ps postgres | awk 'NR>2 {print $1}' | tr -d '\n')

  if pg_drop_db $pg_container $1 ; then
    echo "Dropped database"
  fi
  if pg_create_db $pg_container $1 ; then
    echo "Created database"
  fi
  if ./manage.py migrate ; then
    echo "Ran Migrations"
  fi
  if custom_pg_restore $1 ; then
    echo "Restored DB"
  fi
}


#############################################
# Django Aliases
#############################################
export DJ_USER="adin"
export DJ_EMAIL="adin@honeylogic.io"
export DJ_PASSWORD="test"
alias djuser=create_django_user

function create_django_user {

  # Cookiecutter-django all-auth models
  local dj_dir=$(basename "$PWD")
  echo "from $dj_dir.users.models import User; User.objects.create_superuser('$DJ_USER', '$DJ_EMAIL', '$DJ_PASSWORD')" | python manage.py shell
}
#############################################
# Broot
#############################################
source /home/adin/.config/broot/launcher/bash/br

#############################################
# Tanka
#############################################
complete -o nospace -C /usr/bin/tk tk

#############################################
# Completion
#############################################
fpath=(~/.zsh/completion $fpath)
fpath+=~/.zfunc

# Init compinit
autoload -Uz compinit && compinit -i

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
