### Set/unset ZSH options
#########################
setopt INC_APPEND_HISTORY SHARE_HISTORY
setopt APPEND_HISTORY
unsetopt BG_NICE
setopt CORRECT
setopt EXTENDED_HISTORY
setopt MENUCOMPLETE
setopt ALL_EXPORT

### Set/unset  shell options
############################
setopt   notify globdots correct pushdtohome cdablevars autolist
setopt   correctall autocd recexact longlistjobs
setopt   autoresume histignoredups pushdsilent
setopt   autopushd pushdminus extendedglob rcquotes mailwarning
unsetopt bgnice autoparamslash
#############################################
source ~/.zplug/init.zsh
#############################################
# Z Plugins
#############################################
zplug "zsh-users/zsh-syntax-highlighting", defer:2
zplug "adinhodovic/docker-alias", use:zshrc
zplug "adinhodovic/docker-compose-alias", use:zshrc
zplug "adinhodovic/ansible-alias", use:zshrc
zplug "adinhodovic/git-alias", use:zshrc
zplug "adinhodovic/terraform-alias", use:zshrc
zplug "adinhodovic/kubectl-alias", use:zshrc
zplug "adinhodovic/calc.plugin.zsh", use:zshrc              # zsh calc
zplug "djui/alias-tips"                                     # Give tips when not using aliases
zplug "popstas/zsh-command-time"                            # Time activities
zplug "wfxr/forgit"                                         # Git FZF utility tool
zplug "b4b4r07/emoji-cli"                                   # Emoji cli
zplug "hlissner/zsh-autopair", defer:2                      # Autopair
zplug "Aloxaf/fzf-tab"
zplug "plugins/kubectl", from:oh-my-zsh, defer:2
zplug "bonnefoa/kubectl-fzf", defer:3
zplug "go-task/task", use:"completion/zsh/_task"
zplug "plugins/ssh-agent",   from:oh-my-zsh
zplug "jonmosco/kube-ps1", use:kube-ps1.sh
#zplug "sorin-ionescu/prezto", use:init.zsh                 # https://github.com/sorin-ionescu/prezto
zplug "modules/command-not-found", from:prezto              # Command-not-found
zplug "modules/archive", from:prezto                        # Archive
zplug "olivierverdier/zsh-git-prompt", use:zshrc.sh         # git-prompt
zplug "skywind3000/z.lua", use:z.lua.plugin.zsh
#############################################
# ZPlug
#############################################
# Then, source plugins and add commands to $PATH
zplug load
#############################################
# Z Modules Autoload zsh modules when they are referenced
#################################################
autoload -U history-search-end
zmodload -a zsh/stat stat
zmodload -a zsh/zpty zpty
zmodload -a zsh/zprof zprof
zmodload zsh/zpty

#############################################
# Docker and Docker-Compose
#############################################

#############################################
# Zsh Time
#############################################

ZSH_COMMAND_TIME_MIN_SECONDS=60

#############################################
# SSH Agent
zstyle :omz:plugins:ssh-agent agent-forwarding on
#############################################

# Set vi-mode
bindkey -v
#zmodload -ap zsh/mapfile mapfile
# Move to the end of the line and exclude whitespace
tmux-copy-mode() {
if [ -n "$TMUX" ]; then
  tmux copy-mode
fi
}

# Paste from clipboard
vi-append-x-selection-before () {
RBUFFER="$(xclip -o)$RBUFFER"
}
vi-append-x-selection-after () {
CURSOR=$((CURSOR+1))
RBUFFER="$(xclip -o)$RBUFFER"
}
function noop () {}
zle -N noop

end-of-line-no-whitespace() {
  zle vi-end-of-line
  zle vi-backward-word-end
}
zle -N end-of-line-no-whitespace

zle -N vi-append-x-selection-before
zle -N vi-append-x-selection-after

zle -N tmux-copy-mode

# Enable reverse-menu-complete
zmodload zsh/complist
zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
# Highlight selected option in tab completion menu
zstyle ':completion:*' menu select

# Key bindings. Wanna find weird keycodes? use cat
# Fix backspace delete in vi-mode
# http://www.zsh.org/mla/users/2009/msg00812.html
bindkey "^?" backward-delete-char
# Movement bindings
bindkey -M vicmd q vi-backward-word
bindkey -M vicmd 0 noop
bindkey -M vicmd Q vi-beginning-of-line
bindkey -M vicmd $ noop
bindkey -M vicmd W end-of-line-no-whitespace

bindkey -M vicmd P vi-append-x-selection-before
bindkey -M vicmd p vi-append-x-selection-after

function tmux-search {
  tmux copy-mode && tmux send-keys '?' && tmux send-keys \
    BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace
}
zle -N tmux-search

bindkey -M vicmd '/' tmux-search
bindkey -M vicmd v tmux-copy-mode

# Reverse scrolling shift+tab
bindkey -M menuselect '^[[Z' reverse-menu-complete
################################################
# ZSH-Autosuggest
################################################
bindkey '^I ' autosuggest-accept
################################################
# Aliases
################################################
# Allows 256 colors as background in terminal, used for Vi
alias tmux="tmux -2 -u"
alias cat="bat"
# lsd instead of ls
alias ls='lsd'
alias cl='clear'
alias l='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias lt='ls --tree'

alias c='z -I'
alias cc='z -c'
alias c.="cd .."
alias c..="cd ../.."
alias c...="cd ../../.."

alias cvenv="python -m venv .venv"

alias seda=search_and_replace_all
# Usecase raf regexA regexB **
alias raf=rename_all_files

search_and_replace_all () {
  rg "$3" --files-with-matches | xargs sed -i "s/$1/$2/g"
}

rename_all_files () {
  rename -v "$1" "$2" "$3"
}

alias tf='terraform'
alias top='vtop --theme gruvbox'

alias xc='xclip -sel clip'
alias v='nvim'
alias ps='procs'
alias s-hl='vps-sync hl-ops-jumphost ~/company/honeylogic/ops ~/ops ops'
alias t=taskwarrior
alias tempdir='tempdir=$(mktemp -d) && cd $tempdir'

# cd shortkeys
alias cd.="cd .."
alias cd..="cd ../.."
alias cd...="cd ../../.."
alias cd....='cd ../../../..'

# Z.lua
alias zz='z -c'      # restrict matches to subdirs of $PWD
alias zi='z -i'      # cd with interactive selection
alias zf='z -I'      # use fzf to select in multiple matches
alias zb='z -b'      # quickly cd to the parent directory
alias zh='z -I -t .'

alias tempdir='tempdir=$(mktemp -d) && cd $tempdir'
alias cp='cp -v '
alias mv='mv -v '
alias h="history"
alias cd-="cd -"
alias setxkbmapcaps="setxkbmap -option caps:swapescape68"
alias o='xdg-open'
alias v=nvim
alias dus=diskus


function vf {
  if [ "$#" -lt 1 ]; then
    return 1
  fi
  results=$(ag --nogroup --column --color "$@" | fzf --multi --ansi --prompt 'AG>')
  if [ -n "$results" ]; then
    files=$(echo $results | awk -F ':' '{print $1":"$2":"$3}' | tr '\r\n' ' ')
    eval nvim "$files"
  fi
}

fcommit() {
  local commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
  local commit=$(echo "$commits" | fzf --tac +s -m -e --ansi --reverse) &&
  echo -n $(echo "$commit" | sed "s/ .*//")
}

### Set variables
#################
export PATH="$PATH:/usr/local/bin:/usr/local/sbin/:/home/adin/go/bin/"
export PATH="$PATH:$HOME/.poetry/bin"
export PATH="$PATH:/home/adin/.local/bin/"
export PATH="$PATH:/home/adin/.gem/ruby/2.6.0/bin"
export PATH="$PATH:/.local/share/nvim/plugged/vim-terraform-completion/bin/tffilter"
export PATH=$PATH:~/work/tidepool/development/bin

export PYTHONPATH="/usr/local/lib/python3.8/site-packages:$PYTHONPATH"

export TERMINAL=/usr/bin/alacritty
export TERM=screen-256color

export RIPGREP_CONFIG_PATH=~/.ripgreprc

NPM_PACKAGES="${HOME}/.npm-packages"
export PATH="$NPM_PACKAGES/bin:$PATH"
export NODE_PATH="${NPM_PACKAGES}/lib/node_modules"

# Unset manpath so we can inherit from /etc/manpath via the `manpath` command
unset MANPATH # delete if you already modified MANPATH elsewhere in your config
export MANPATH="$NPM_PACKAGES/share/man:$(manpath)"

### History
#################
HISTFILE=$HOME/.zhistory
HISTSIZE=5000
SAVEHIST=5000
HOSTNAME="`hostname`"
# zle-line-init() {
  # fzf-history-widget
# }
# zle -N zle-line-init
##################################
### Set prompt
##################################
unsetopt ALL_EXPORT
PROMPT='%{$fg[blue]%}%1d%{$reset_color%} $(git_super_status) '
RPROMPT='%{$fg[blue]%}$(kube_ps1)%{$reset_color%}'
### Bind keys
#############
bindkey "^?" backward-delete-char
bindkey '^[OH' beginning-of-line
bindkey '^[OF' end-of-line
bindkey '^[[5~' up-line-or-history
bindkey '^[[6~' down-line-or-history
bindkey "^r" history-incremental-search-backward
bindkey ' ' magic-space    # also do history expansion on space
bindkey '^I' complete-word # complete on tab, leave expansion to _expand
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path ~/.zsh/cache/$HOST
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' menu select=1 _complete _ignored _approximate
zstyle -e ':completion:*:approximate:*' max-errors \
  'reply=( $(( ($#PREFIX+$#SUFFIX)/2 )) numeric )'
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'

# Completion Styles

# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

# allow one error for every three characters typed in approximate completer
zstyle -e ':completion:*:approximate:*' max-errors \
  'reply=( $(( ($#PREFIX+$#SUFFIX)/2 )) numeric )'

# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# command for process lists, the local web server details and host completion
# on processes completion complete all user processes
zstyle ':completion:*:processes' command 'ps -au$USER'

## add colors to processes for kill completion
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

#zstyle ':completion:*:processes' command 'ps -o pid,s,nice,stime,args'
#zstyle ':completion:*:urls' local 'www' '/var/www/htdocs' 'public_html'
#
#NEW completion:
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.o' '*?.c~' \
  '*?.old' '*?.pro'
# the same for old style completion
#fignore=(.o .c~ .old .pro)

# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:*:*:users' ignored-patterns \
  adm apache bin daemon games gdm halt ident junkbust lp mail mailnull \
  named news nfsnobody nobody nscd ntp operator pcap postgres radvd \
  rpc rpcuser rpm shutdown squid sshd sync uucp vcsa xfs avahi-autoipd\
  avahi backup messagebus beagleindex debian-tor dhcp dnsmasq fetchmail\
  firebird gnats haldaemon hplip irc klog list man cupsys postfix\
  proxy syslog www-data mldonkey sys snort
# SSH Completion
zstyle ':completion:*:scp:*' tag-order \
  files users 'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:scp:*' group-order \
  files all-files users hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' tag-order \
  users 'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:ssh:*' group-order \
  hosts-domain hosts-host users hosts-ipaddr
zstyle '*' single-ignored show

########################################################
# FZF
########################################################
# Feed the output of fd into fzf
export FZF_DEFAULT_COMMAND='rg --hidden -l ""'

# To apply the command to CTRL-T as well
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

### Source plugins
##################
stty stop undef
function fzf-ssh {
  all_matches=$(grep -P -r "Host\s+\w+" ~/.ssh/ | grep -v '\*')
  only_host_parts=$(echo "$all_matches" | awk '{print $NF}')
  selection=$(echo "$only_host_parts" | fzf)
  echo $selection

  if [ ! -z $selection ]; then
    BUFFER="ssh $selection"
    zle accept-line
  fi
  zle reset-prompt
}
zle -N fzf-ssh

function fzf-docker-logs {
  matches=$(docker ps --format 'table {{ .Names }}\t{{ .Image }}')
  selection=$(echo $matches | fzf --header-lines=1 | awk '{print $1}')
  if [ ! -z $selection ]; then
    args="${@:-"--tail 100 -f"}"
    BUFFER="docker logs $args $selection"
    zle accept-line
  fi
}
zle -N fzf-docker-logs

function fzf-docker-exec
 fcommit() {
  local commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
  local commit=$(echo "$commits" | fzf --tac +s -m -e --ansi --reverse) &&
  echo -n $(echo "$commit" | sed "s/ .*//")
}
zle -N fzf-docker-exec

function fzf-file-widget() {
  CURSOR=$(($CURSOR + 1))
  LBUFFER="${LBUFFER}$(__fsel)"
  local ret=$?
  zle -K viins
  zle redisplay
  typeset -f zle-line-init >/dev/null && zle zle-line-init
  return $ret
}
zle -N fzf-file-widget

bindkey -M vicmd '\-'   fzf-file-widget

bindkey -M vicmd '^s'   fzf-ssh
bindkey -M viins '^s'   fzf-ssh

bindkey -M vicmd '^l'   fzf-docker-logs
bindkey -M viins '^l'   fzf-docker-logs

bindkey -M vicmd '^x'   fzf-docker-exec
bindkey -M viins '^x'   fzf-docker-exec

function awsprofile {
  profile=$(grep --text -E '\[.+\]' ~/.aws/credentials | tr -d '[]' | fzf)
  if [ -n "$profile" ]; then
    echo $profile > ~/.aws_profile
    export AWS_PROFILE=$profile
  fi
}

function awsregion {
  regions=(
    "us-east-2        (Ohio)"
    "us-east-1        (N. Virginia)"
    "us-west-1        (N. California)"
    "us-west-2        (Oregon)"
    "ap-south-1       (Mumbai)"
    "ap-northeast-3   (Osaka-Local)"
    "ap-northeast-2   (Seoul)"
    "ap-southeast-1   (Singapore)"
    "ap-southeast-2   (Sydney)"
    "ap-northeast-1   (Tokyo)"
    "ca-central-1     (Canada)"
    "cn-north-1       (Beijing)"
    "cn-northwest-1   (Ningxia)"
    "eu-central-1     (Frankfurt)"
    "eu-west-1        (Ireland)"
    "eu-west-2        (London)"
    "eu-west-3        (Paris)"
    "eu-north-1       (Stockholm)"
    "sa-east-1        (São Paulo)"
  )
  selected=$(printf '%s\n' "${regions[@]}" | fzf --sort | awk '{print $1}')
  if [ -n "$selected" ]; then
    echo $selected > ~/.aws_region
    export AWS_DEFAULT_REGION=$selected
  fi
}

[ -f ~/.aws/profile ] && export AWS_PROFILE=$(cat ~/.aws/profile)
[ -f ~/.aws/region ]  && export AWS_DEFAULT_REGION=$(cat ~/.aws/region)

function molecule-ssh {
  dir=$(basename $PWD)
  ssh -i /tmp/molecule/$dir/default/ssh_key $(grep address /tmp/molecule/$dir/default/instance_config.yml | awk '{print $NF}')
}

# Add direnv
eval "$(direnv hook zsh)"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# added by travis gem
[ -f /home/adin/.travis/travis.sh ] && source /home/adin/.travis/travis.sh

#############################################
# Completion
#############################################
complete -o nospace -C /usr/bin/terraform terraform
fpath=(~/.zsh/completion $fpath)
fpath+=~/.zfunc
#fpath=(~/personal/terraform-target-completion $fpath)

# Init compinit
autoload -Uz compinit && compinit -i
autoload -U +X bashcompinit && bashcompinit

#############################################
# Automation
#############################################
function git-standup-last-week() {
  python <<EOF
from datetime import date, timedelta
import subprocess
import os
today = date.today()
beginning_of_last_week = today - timedelta(days=today.weekday() + 7)
end_of_last_week = beginning_of_last_week + timedelta(days=7)
cmd = f"git standup -A {beginning_of_last_week} -B {end_of_last_week} -s"
home = os.path.expanduser("~")
dirs = [
  os.path.join(home, ".dotfiles"),
  os.path.join(home, "company"),
  os.path.join(home, "personal"),
]
for dir in dirs:
  subprocess.run(cmd, shell=True, cwd=dir)
EOF
}

function k8s-delete-all-namespace-resources {
  kubectl delete "$(kubectl api-resources --namespaced=true --verbs=delete -o name | tr "\n" "," | sed -e 's/,$//')" --all
}

#############################################
# Kubectl fzf
#############################################

export KUBECTL_FZF_OPTIONS=(-1 --header-lines=2 --layout reverse -e --no-hscroll --no-sort --bind space:accept --bind tab:down)

#############################################
# Postgres
#############################################

function pg_dump {
  docker run -v $PWD/db_dump:/data/db_dump/ -i --rm --entrypoint='' --net=host postgres pg_dump -h $1 -U $2 -d $3 -p $4 -j 4 -F d -f /data/db_dump
}

function pg_drop_db {
  docker exec $1 psql -U postgres -c "DROP DATABASE $2;"
}

function pg_create_db {
  docker exec $1 psql -U postgres -c "CREATE DATABASE $2;"
}

function pg_create_extension {
  docker exec $1 psql -U postgres -c "CREATE EXTENSION pg_trgm;"
}

function pg_create_user {
  dc exec $1 psql -U postgres -c "CREATE USER $2;"
}

function pg_restore {
  docker exec $1 pg_restore --clean -d $2 -h 0.0.0.0 -U postgres /tmp/db_dump/
}

function pg_drop_and_restore {
  local pg_container=$(docker-compose ps postgres | awk 'NR>2 {print $1}' | tr -d '\n')

  if pg_drop_db $pg_container $1 ; then
    echo "Dropped database"
  fi
  if pg_create_db $pg_container $1 ; then
    echo "Created database"
  fi
  if ./manage.py migrate ; then
    echo "Ran Migrations"
  fi
  if pg_restore $pg_container $1 ; then
    echo "Restored DB"
  fi
}

#############################################
# Broot
#############################################
source /home/adin/.config/broot/launcher/bash/br
